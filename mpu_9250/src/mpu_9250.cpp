#include <RTIMULib.h>
#include <ros/ros.h>
#include <sensor_msgs/Imu.h>
#include "std_msgs/Float32.h"

int main(int argc, char** argv)
{
    int sampleCount = 0;
    int sampleRate = 0;
    uint64_t rateTimer;
    uint64_t displayTimer;
    uint64_t now;
    ros::init(argc, argv, "rtimulib_node");
    ros::NodeHandle nh2;
    ros::Publisher angle_pub = nh2.advertise<std_msgs::Float32>("imu_angle", 1);
    std_msgs::Float32 angle_msg;

	

    //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
    //  Or, you can create the .ini in some other directory by using:
    //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
    //  where <directory path> is the path to where the .ini file is to be loaded/saved

    RTIMUSettings *settings = new RTIMUSettings("RTIMULib");

    RTIMU *imu = RTIMU::createIMU(settings);

    if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
        printf("No IMU found\n");
        exit(1);
    }

    //  This is an opportunity to manually override any settings before the call IMUInit

    //  set up IMU

    imu->IMUInit();

    //  this is a convenient place to change fusion parameters

    imu->setSlerpPower(0.02);
    imu->setGyroEnable(true);
    imu->setAccelEnable(true);
    imu->setCompassEnable(true);

    //  set up for rate timer

    rateTimer = displayTimer = RTMath::currentUSecsSinceEpoch();

    //  now just process data

    while (ros::ok()) {
        //  poll at the rate recommended by the IMU

        usleep(imu->IMUGetPollInterval() * 1000);

        if (imu->IMURead()) 
	{
            RTIMU_DATA imuData = imu->getIMUData();
            sampleCount++;

            now = RTMath::currentUSecsSinceEpoch();

            //  display 10 times per second

            if ((now - displayTimer) > 10000) {

		printf("Angle : %.6f\n", imuData.fusionPose.z() * RTMATH_RAD_TO_DEGREE);
		angle_msg.data = imuData.fusionPose.z() * RTMATH_RAD_TO_DEGREE;
		
                fflush(stdout);
                displayTimer = now;
            }

            //  update rate every second

            if ((now - rateTimer) > 10000) {
                sampleRate = sampleCount;
                sampleCount = 0;
                rateTimer = now;
		angle_pub.publish(angle_msg);
            }
        }
        ros::Duration(imu->IMUGetPollInterval() / 1000.0).sleep();
    }
}

